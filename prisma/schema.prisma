generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model order {
  idOrder         Int       @id @default(autoincrement())
  creationdate    DateTime  @default(now())
  user            Int
  applicantperson Int
  managingperson  Int
  debtamount      Int
  state           Int       @default(1)
  faculty         Int
  bill            bill?     @relation("OrderToBill")
  applicant       person    @relation("OrderApplicant", fields: [applicantperson], references: [idperson])
  manager         person    @relation("OrderManager", fields: [managingperson], references: [idperson])
  facultyRel      faculty   @relation("OrderFaculty", fields: [faculty], references: [idfaculty])
  users           users     @relation(fields: [user], references: [idusers])

  @@index([applicantperson])
  @@index([faculty])
  @@index([managingperson])
  @@index([user])
}

model bill {
  idbill     Int       @id @default(autoincrement())
  billdate   DateTime  @default(now()) 
  orderId    Int       @unique
  order      order     @relation("OrderToBill", fields: [orderId], references: [idOrder])
  state      String    @default("activo")

  initialNotes creditNote[] @relation("InitialBillRelation")
  finalNotes   creditNote[] @relation("FinalBillRelation")
}

model creditNote {
  idcreditNote   Int   @id @default(autoincrement())
  amount         Int
  reason         String
  initialBillId  Int
  finalBillId    Int

  initialBill    bill @relation("InitialBillRelation", fields: [initialBillId], references: [idbill])
  finalBill      bill? @relation("FinalBillRelation", fields: [finalBillId], references: [idbill])
}

model faculty {
  idfaculty    Int      @id @default(autoincrement())
  name         String   @db.VarChar(45)
  phone        String
  associatedemails String @db.VarChar(45)
  inchargeperson Int?
  orders       order[]  @relation("OrderFaculty")
  person       person?  @relation(fields: [inchargeperson], references: [idperson])
  facultyEmail facultyEmail? @relation("faculty_facultyEmail")

  @@index([inchargeperson])
}

model person {
  idperson Int @id @default(autoincrement())
  name     String @db.VarChar(45)
  lastname String @db.VarChar(45)
  cellphone String
  email    email? @relation("email_person")
  applicantOrders order[] @relation("OrderApplicant")
  managerOrders   order[] @relation("OrderManager")
  faculty         faculty[]
}

model email {
  idEmail  Int    @id @default(autoincrement())
  email    String @db.VarChar(300)
  personId Int    @unique
  person   person @relation("email_person", fields: [personId], references: [idperson])
}

model facultyEmail {
  idEmail    Int     @id @default(autoincrement())
  email      String  @db.VarChar(300)
  facultyId  Int     @unique
  faculty    faculty @relation("faculty_facultyEmail", fields: [facultyId], references: [idfaculty])
}

model users {
  idusers Int @id @default(autoincrement())
  email   String @unique
  firstname String @db.VarChar(45)
  lastname  String @db.VarChar(45)
  password  String @db.Text
  orders    order[]
}
