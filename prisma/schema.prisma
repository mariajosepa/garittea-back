generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model bills {
  idbills Int      @id @default(autoincrement())
  date    DateTime @db.Date
  route   String   @db.VarChar(300)
  credit  credit[]
}

model credit {
  idcredit                              Int     @id @default(autoincrement())
  user                                  Int
  applicantperson                       Int     
  managingperson                        Int?
  debtamount                            Int
  state                                 Int
  faculty                               Int
  bill                                  Int?
  person_credit_applicantpersonToperson person  @relation("credit_applicantpersonToperson", fields: [applicantperson], references: [idperson], onDelete: NoAction, onUpdate: NoAction, map: "applicantperson")
  bills                                 bills?  @relation(fields: [bill], references: [idbills], onDelete: NoAction, onUpdate: NoAction, map: "bill")
  faculty_credit_facultyTofaculty       faculty @relation("credit_facultyTofaculty", fields: [faculty], references: [idfaculty], onDelete: NoAction, onUpdate: NoAction, map: "faculty")
  person_credit_managingpersonToperson  person? @relation("credit_managingpersonToperson", fields: [managingperson], references: [idperson], onDelete: NoAction, onUpdate: NoAction, map: "managingperson")
  users                                 users   @relation(fields: [user], references: [idusers], onDelete: NoAction, onUpdate: NoAction, map: "user")

  @@index([applicantperson], map: "applicantperson_idx")
  @@index([bill], map: "bill_idx")
  @@index([faculty], map: "faculty_idx")
  @@index([managingperson], map: "managingperson_idx")
  @@index([user], map: "user_idx")
}

model faculty {
  idfaculty                      Int      @id @default(autoincrement())
  name                           String   @db.VarChar(45)
  phone                          Int
  associatedemails               String   @db.VarChar(45)
  inchargeperson                 Int?
  credit_credit_facultyTofaculty credit[] @relation("credit_facultyTofaculty")
  person                         person?  @relation(fields: [inchargeperson], references: [idperson], onDelete: NoAction, onUpdate: NoAction, map: "inchargeperson")
  facultyEmail              facultyEmail?  @relation("faculty_facultyEmail")

  @@index([inchargeperson], map: "inchargeperson_idx")
}

model person {
  idperson                              Int       @id @default(autoincrement())
  name                                  String    @db.VarChar(45)
  cellphone                             Int
  email                                 email?     @relation("email_person")
  canmanage                             Bytes     @default("MA==")
  credit_credit_applicantpersonToperson credit[]  @relation("credit_applicantpersonToperson")
  credit_credit_managingpersonToperson  credit[]  @relation("credit_managingpersonToperson")
  faculty                               faculty[]
}

model email{
  idEmail Int  @id @default(autoincrement())
  email String @db.VarChar(300)
  personId Int @unique
  person person @relation("email_person", fields: [personId], references: [idperson], onDelete: NoAction, onUpdate: NoAction, map: "person")   
}

model facultyEmail {
  idEmail Int  @id @default(autoincrement())
  email String @db.VarChar(300)
  facultyId Int @unique
  faculty faculty @relation("faculty_facultyEmail", fields: [facultyId], references: [idfaculty], onDelete: NoAction, onUpdate: NoAction, map: "faculty")
}

model users {
  idusers   Int      @id @default(autoincrement())
  firstname String   @db.VarChar(45)
  lastname  String   @db.VarChar(45)
  password  String   @db.VarChar(45)
  credit    credit[]
}
